package ethabi
package protocol

import io.circe._
import org.scalatest.matchers.should.Matchers
import org.scalatest.wordspec.AnyWordSpec
import Response._

class ResponseSpec extends AnyWordSpec with Matchers {
  "test decode header" in {
    val headerJson = jawn.parse(
      s"""
      |{
      |  "parentHash": "0xe99e022112df268087ea7eafaf4790497fd21dbeeb6bd7a1721df161a6657a54",
      |  "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
      |  "miner": "0xbb7b8287f3f0a933474a79eae42cbca977791171",
      |  "stateRoot": "0xddc8b0234c2e0cad087c8b389aa7ef01f7d79b2570bccb77ce48648aa61c904d",
      |  "transactionsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
      |  "difficulty": "0x4ea3f27bc",
      |  "extraData": "0x476574682f4c5649562f76312e302e302f6c696e75782f676f312e342e32",
      |  "gasLimit": "0x1388",
      |  "gasUsed": "0x0",
      |  "hash": "0xdc0818cf78f21a8e70579cb46a43643f78291264dda342ae31049421c82d21ae",
      |  "logsBloom": "0x
      |  "miner": "0xbb7b8287f3f0a933474a79eae42cbca977791171",
      |  "mixHash": "0x4fffe9ae21f1c9e15207b1f472d5bbdd68c9595d461666602f2be20daf5e7843",
      |  "nonce": "0x689056015818adbe",
      |  "number": "0x1b4",
      |  "receiptsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
      |  "size": "0x220",
      |  "timestamp": "0x55ba467c",
      |  "totalDifficulty": "0x78ed983323d"
      |}
      |""".stripMargin
    ).getOrElse(null)
    Decoder[Header].decodeJson(headerJson).fold(err => err.printStackTrace(), println)
  }

  "test decode block" in {
    val blockJson = jawn.parse(
      s"""
      |{
      |  "parentHash": "0xe99e022112df268087ea7eafaf4790497fd21dbeeb6bd7a1721df161a6657a54",
      |  "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
      |  "miner": "0xbb7b8287f3f0a933474a79eae42cbca977791171",
      |  "stateRoot": "0xddc8b0234c2e0cad087c8b389aa7ef01f7d79b2570bccb77ce48648aa61c904d",
      |  "transactionsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
      |  "difficulty": "0x4ea3f27bc",
      |  "extraData": "0x476574682f4c5649562f76312e302e302f6c696e75782f676f312e342e32",
      |  "gasLimit": "0x1388",
      |  "gasUsed": "0x0",
      |  "hash": "0xdc0818cf78f21a8e70579cb46a43643f78291264dda342ae31049421c82d21ae",
      |  "logsBloom": "0x
      |  "miner": "0xbb7b8287f3f0a933474a79eae42cbca977791171",
      |  "mixHash": "0x4fffe9ae21f1c9e15207b1f472d5bbdd68c9595d461666602f2be20daf5e7843",
      |  "nonce": "0x689056015818adbe",
      |  "number": "0x1b4",
      |  "receiptsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
      |  "size": "0x220",
      |  "timestamp": "0x55ba467c",
      |  "totalDifficulty": "0x78ed983323d",
      |  "transactions": ["0xe99e022112df268087ea7eafaf4790497fd21dbeeb6bd7a1721df161a6657a54"],
      |  "uncles": ["0xe99e022112df268087ea7eafaf4790497fd21dbeeb6bd7a1721df161a6657a54"]
      |}
      |""".stripMargin
    ).getOrElse(null)
    Decoder[Block].decodeJson(blockJson).fold(exp => throw exp, println)
  }
}
